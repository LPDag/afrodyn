genotype[1,]
names(genotype)
library(maps)
coordinates[1:3,]
plot(coordinates, pch = 19, cex = .5,
xlab = "Longitude (°E)", ylab = "Latitude (°N)")
map(add = T, interior = F)
tess3.obj <- tess3(X = genotype, coord = coordinates, K = 1:10,
method = "projected.ls", ploidy = 2, openMP.core.num = 2)
plot(tess3.obj, pch = 19, col = "blue",
xlab = "Number of ancestral populations",
ylab = "Cross-validation score")
# retrieve tess3 Q matrix for K = 5 clusters
q.matrix <- qmatrix(tess3.obj, K = 4)
my.palette <- CreatePalette(color.vector = c("tomato", "chartreuse", "gold", "blue","violet", "wheat", "olivedrab","grey"))
# STRUCTURE-like barplot for the Q-matrix
pdf("tess_barplot.pdf")
barplot(q.matrix, border = NA, space = 0,
xlab = "Individuals", ylab = "Ancestry proportions",
main = "Ancestry matrix",col.palette=my.palette) -> bp
## Use CreatePalette() to define color palettes.
axis(1, at = 1:nrow(q.matrix), labels = bp$order, las = 3, cex.axis = .4)
dev.off()
library(raster)
library(rworldmap)
pdf("tess.pdf")
plot(q.matrix, coordinates, method = "map.max", interpol = FieldsKrigModel(10),
main = "Ancestry coefficients",
xlab = "Longitude", ylab = "Latitude",
resolution = c(300,300), cex = .4,
col.palette = my.palette)
dev.off()
nseq-2
214/4
214/2
214/0.75
214*0.75
rm(list=ls())
library(MASS)
library(pegas)
library(vcfR)
setwd("~/Dropbox/projects/AJH_AFRODYN/clustering/green/")
##
# Sort IDs and names
##
id_ind<-read.csv("ID_index.csv")
id_vou<-read.csv("ID_voucher.csv")
only_seq<-id_vou[id_vou$ID%in%id_ind$ID,]
sort(id_ind$ID)
id_ind[order(id_ind$ID),]
foo<-cbind(only_seq[order(only_seq$ID),],id_ind[order(id_ind$ID),])
sb<-data.frame(as.character(foo$index),as.character(foo$voucher))
colnames(sb)<-c('index','voucher')
sb$index<-as.character(sb$index)
sb$voucher<-as.character(sb$voucher)
sb<-sb[match(sort(sb$index),sb$index),]
sb<-sb[order(sb$index),]
sb<-sb[c(1:34,54:length(sb$index)),]
###
# read in VCF
###
vcf <- read.vcfR("/home/helmstet/Dropbox/projects/AJH_AFRODYN/greenwayodendron/green_filtered_dp.vcf",checkFile = T, convertNA = T) #read in all data
vcf
### convert to genlight
aa.genlight <- vcfR2genlight(vcf, n.cores=1)
indNames(aa.genlight) <-sb$voucher
### PCA
pca.1 <- glPca(aa.genlight, nf=300, n.cores=2) # retain first 300 axes (for later use in find.clusters); slow function
pdf("scatterplot.pdf")
plot(pca.1$scores[,1],pca.1$scores[,2])
text(pca.1$scores[,1],pca.1$scores[,2], labels=names(pca.1$scores[,1]), cex= 0.7)
dev.off()
xval[2:6]
### find clusters
grp <- find.clusters(aa.genlight, max.n.clust=20, glPca = pca.1, perc.pca = 100, n.iter=1e6, n.start=1000)
dapc1<-dapc(aa.genlight, grp$grp, glPca = pca.1)
dapc1<-dapc(aa.genlight, grp$grp, glPca = pca.1)
opt_pc <- optim.a.score(dapc1)
opt_pc
dapc1<-dapc(aa.genlight, grp$grp, glPca = pca.1)
#cluster scatterplot
pdf("DAPC_scatter.pdf")
scatter(dapc1)
dev.off()
pdf("DAPC_scatter2.pdf")
scatter(dapc1, cex = 2, legend = TRUE,
clabel = FALSE, posi.leg = "bottomleft", scree.pca = TRUE,
posi.pca = "topleft", cleg = 0.75, xax = 1, yax = 2, inset.solid = 1)
dev.off()
table(dapc1$grp)
###
#CROSS VALIDATION # DO NOT RUN UNLESS NEEDED
###
#transform vcf to genind
aa.genind <- vcfR2genind(vcf)
#set populations based on DAPC resuts
dapcgrp<-dapc1$grp
dapcgrp<-dapcgrp[order(match(names(dapcgrp),indNames(aa.genind)))]
pop(aa.genind) <- dapcgrp
library(poppr)
set.seed(999)
pdf("cross_val.pdf")
pramx <- xvalDapc(tab(aa.genind, NA.method = "mean"), pop(aa.genind))
rm(list=ls())
library(MASS)
library(pegas)
library(vcfR)
setwd("~/Dropbox/projects/AJH_AFRODYN/clustering/anon/")
##
# Sort IDs and names
##
id_ind<-read.csv("ID_index.csv")
id_vou<-read.csv("ID_voucher.csv")
only_seq<-id_vou[id_vou$ID%in%id_ind$ID,]
foo<-cbind(only_seq[order(only_seq$ID),],id_ind[order(id_ind$ID),])
sb<-data.frame(as.character(foo$index),as.character(foo$voucher))
colnames(sb)<-c('index','voucher')
sb$index<-as.character(sb$index)
sb$voucher<-as.character(sb$voucher)
sb<-sb[match(sort(sb$index),sb$index),]
sb<-sb[order(sb$index),]
###
# read in VCF
###
vcf <- read.vcfR("anon_filtered.vcf",checkFile = T, convertNA = T) #read in all data
head(vcf)
### convert to genlight
aa.genlight <- vcfR2genlight(vcf, n.cores=1)
indNames(aa.genlight) <-sb$voucher
### PCA
pca.1 <- glPca(aa.genlight, nf=300, n.cores=2) # retain first 300 axes (for later use in find.clusters); slow function
pdf("scatterplot.pdf")
plot(pca.1$scores[,1],pca.1$scores[,2])
text(pca.1$scores[,1],pca.1$scores[,2], labels=names(pca.1$scores[,1]), cex= 0.7)
dev.off()
xval[2:6]
### find clusters
grp <- find.clusters(aa.genlight, max.n.clust=20, glPca = pca.1, perc.pca = 100, n.iter=1e6, n.start=1000)
dapc1<-dapc(aa.genlight, grp$grp, glPca = pca.1)
opt_pc <- optim.a.score(dapc1)
opt_pc
dapc1<-dapc(aa.genlight, grp$grp, glPca = pca.1)
#cluster scatterplot
pdf("DAPC_scatter.pdf")
scatter(dapc1)
dev.off()
pdf("DAPC_scatter2.pdf")
scatter(dapc1, cex = 2, legend = TRUE,
clabel = FALSE, posi.leg = "bottomleft", scree.pca = TRUE,
posi.pca = "topleft", cleg = 0.75, xax = 1, yax = 2, inset.solid = 1)
dev.off()
table(dapc1$grp)
###
#CROSS VALIDATION # DO NOT RUN UNLESS NEEDED
###
#transform vcf to genind
aa.genind <- vcfR2genind(vcf)
#set populations based on DAPC resuts
dapcgrp<-dapc1$grp
dapcgrp<-dapcgrp[order(match(names(dapcgrp),indNames(aa.genind)))]
pop(aa.genind) <- dapcgrp
library(poppr)
set.seed(999)
#pdf("cross_val.pdf")
#pramx <- xvalDapc(tab(aa.genind, NA.method = "mean"), pop(aa.genind))
#system.time(xval <- xvalDapc(tab(aa.genind, NA.method = "mean"), pop(aa.genind),n.pca.max=300,
#                             result = "groupMean", center = TRUE, scale = FALSE,
#                             n.pca = NULL, n.rep = 30, xval.plot = TRUE,
#                             parallel = "multicore", ncpus = 3))
#dev.off()
###
###DAPC map
###
### make a data frame
x <- data.frame(keyName=names(grp$grp), value=grp$grp, row.names=NULL) #
bar<-cbind(x[order(x$keyName),],sb[order(sb$voucher),])
dapc_grps<-data.frame(bar$index,bar$value)
dapc_grps<-dapc_grps[order(dapc_grps$bar.index),]
dapc_grps
foo<-foo[order(foo$index),]
foo
df
df<-data.frame(foo,dapc_grps)
df<-df[,c(2:4,7,9)]
df
write.csv(df,"dapc_grps.csv")
rm(list=ls())
library(MASS)
library(pegas)
library(vcfR)
setwd("~/Dropbox/projects/AJH_AFRODYN/clustering/anon/")
##
# Sort IDs and names
##
id_ind<-read.csv("ID_index.csv")
id_vou<-read.csv("ID_voucher.csv")
only_seq<-id_vou[id_vou$ID%in%id_ind$ID,]
foo<-cbind(only_seq[order(only_seq$ID),],id_ind[order(id_ind$ID),])
sb<-data.frame(as.character(foo$index),as.character(foo$voucher))
colnames(sb)<-c('index','voucher')
sb$index<-as.character(sb$index)
sb$voucher<-as.character(sb$voucher)
sb<-sb[match(sort(sb$index),sb$index),]
sb<-sb[order(sb$index),]
###
# read in VCF
###
vcf <- read.vcfR("anon_filtered_maf.vcf",checkFile = T, convertNA = T) #read in all data
head(vcf)
### convert to genlight
aa.genlight <- vcfR2genlight(vcf, n.cores=1)
indNames(aa.genlight) <-sb$voucher
### PCA
pca.1 <- glPca(aa.genlight, nf=300, n.cores=2) # retain first 300 axes (for later use in find.clusters); slow function
pdf("scatterplot.pdf")
plot(pca.1$scores[,1],pca.1$scores[,2])
text(pca.1$scores[,1],pca.1$scores[,2], labels=names(pca.1$scores[,1]), cex= 0.7)
dev.off()
xval[2:6]
### find clusters
grp <- find.clusters(aa.genlight, max.n.clust=20, glPca = pca.1, perc.pca = 100, n.iter=1e6, n.start=1000)
dapc1<-dapc(aa.genlight, grp$grp, glPca = pca.1)
opt_pc <- optim.a.score(dapc1)
opt_pc
dapc1<-dapc(aa.genlight, grp$grp, glPca = pca.1)
#cluster scatterplot
pdf("DAPC_scatter.pdf")
scatter(dapc1)
dev.off()
pdf("DAPC_scatter2.pdf")
scatter(dapc1, cex = 2, legend = TRUE,
clabel = FALSE, posi.leg = "bottomleft", scree.pca = TRUE,
posi.pca = "topleft", cleg = 0.75, xax = 1, yax = 2, inset.solid = 1)
dev.off()
table(dapc1$grp)
#transform vcf to genind
aa.genind <- vcfR2genind(vcf)
#set populations based on DAPC resuts
dapcgrp<-dapc1$grp
dapcgrp<-dapcgrp[order(match(names(dapcgrp),indNames(aa.genind)))]
pop(aa.genind) <- dapcgrp
library(poppr)
set.seed(999)
### make a data frame
x <- data.frame(keyName=names(grp$grp), value=grp$grp, row.names=NULL) #
bar<-cbind(x[order(x$keyName),],sb[order(sb$voucher),])
dapc_grps<-data.frame(bar$index,bar$value)
dapc_grps<-dapc_grps[order(dapc_grps$bar.index),]
dapc_grps
foo<-foo[order(foo$index),]
foo
df
df<-data.frame(foo,dapc_grps)
df<-df[,c(2:4,7,9)]
df
write.csv(df,"dapc_grps.csv")
58/4
58/2
58*0.75
14/2
14/4
14*0.75
22/4
rm(list=ls())
library(MASS)
library(pegas)
library(vcfR)
setwd("~/Dropbox/projects/AJH_AFRODYN/clustering/green/")
##
# Sort IDs and names
##
id_ind<-read.csv("ID_index.csv")
id_vou<-read.csv("ID_voucher.csv")
only_seq<-id_vou[id_vou$ID%in%id_ind$ID,]
sort(id_ind$ID)
id_ind[order(id_ind$ID),]
foo<-cbind(only_seq[order(only_seq$ID),],id_ind[order(id_ind$ID),])
sb<-data.frame(as.character(foo$index),as.character(foo$voucher))
colnames(sb)<-c('index','voucher')
sb$index<-as.character(sb$index)
sb$voucher<-as.character(sb$voucher)
sb<-sb[match(sort(sb$index),sb$index),]
sb<-sb[order(sb$index),]
sb<-sb[c(1:34,54:length(sb$index)),]
###
# read in VCF
###
vcf <- read.vcfR("/home/helmstet/Dropbox/projects/AJH_AFRODYN/greenwayodendron/green_filtered_dp.vcf",checkFile = T, convertNA = T) #read in all data
vcf
### convert to genlight
aa.genlight <- vcfR2genlight(vcf, n.cores=1)
indNames(aa.genlight) <-sb$voucher
### PCA
pca.1 <- glPca(aa.genlight, nf=300, n.cores=2) # retain first 300 axes (for later use in find.clusters); slow function
pdf("scatterplot.pdf")
plot(pca.1$scores[,1],pca.1$scores[,2])
text(pca.1$scores[,1],pca.1$scores[,2], labels=names(pca.1$scores[,1]), cex= 0.7)
dev.off()
xval[2:6]
### find clusters
grp <- find.clusters(aa.genlight, max.n.clust=20, glPca = pca.1, perc.pca = 100, n.iter=1e6, n.start=1000)
dapc1<-dapc(aa.genlight, grp$grp, glPca = pca.1)
opt_pc <- optim.a.score(dapc1)
opt_pc
dapc1<-dapc(aa.genlight, grp$grp, glPca = pca.1)
#cluster scatterplot
pdf("DAPC_scatter.pdf")
scatter(dapc1)
dev.off()
pdf("DAPC_scatter2.pdf")
scatter(dapc1, cex = 2, legend = TRUE,
clabel = FALSE, posi.leg = "bottomleft", scree.pca = TRUE,
posi.pca = "topleft", cleg = 0.75, xax = 1, yax = 2, inset.solid = 1)
dev.off()
table(dapc1$grp)
###
#CROSS VALIDATION # DO NOT RUN UNLESS NEEDED
###
#transform vcf to genind
aa.genind <- vcfR2genind(vcf)
rm(list=ls())
library(MASS)
library(pegas)
library(vcfR)
setwd("~/Dropbox/projects/AJH_AFRODYN/clustering/podo_b/")
##
# Sort IDs and names
##
library(ape)
library(MASS)
id_ind<-read.csv("ID_index.csv")
id_vou<-read.csv("ID_voucher.csv")
phy<-read.tree('~/Dropbox/projects/AJH_AFRODYN/podo/RAxML_bipartitions.podo')
phy<-ladderize(phy)
plot(phy)
nodelabels()
phy<-root(phy,node = 149)
plot(phy)
nodelabels()
edgelabels()
podo_b<-extract.clade(phy,node=149,root.edge = 1)
plot(podo_b)
btip<-data.frame(podo_b$tip.label)
#podo_a<-extract.clade(phy,node=191)
#atip<-data.frame(podo_a$tip.label)
id_ind<-id_ind[id_ind$index%in%btip$podo_b.tip.label,]
only_seq<-id_vou[id_vou$ID%in%id_ind$ID,]
sort(id_ind$ID)
id_ind[order(id_ind$ID),]
foo<-cbind(only_seq[order(only_seq$ID),],id_ind[order(id_ind$ID),])
sb<-data.frame(as.character(foo$index),as.character(foo$voucher))
colnames(sb)<-c('index','voucher')
sb$index<-as.character(sb$index)
sb$voucher<-as.character(sb$voucher)
sb<-sb[match(sort(sb$index),sb$index),]
sb<-sb[order(sb$index),]
###
# read in VCF
###
vcf <- read.vcfR("/home/helmstet/Dropbox/projects/AJH_AFRODYN/clustering/podo_b/podo_b_filtered_maf.vcf",checkFile = T, convertNA = T) #read in all data
vcf
### convert to genlight
aa.genlight <- vcfR2genlight(vcf, n.cores=1)
indNames(aa.genlight) <-sb$voucher
### PCA
pca.1 <- glPca(aa.genlight, nf=300, n.cores=2) # retain first 300 axes (for later use in find.clusters); slow function
pdf("scatterplot.pdf")
plot(pca.1$scores[,1],pca.1$scores[,2])
text(pca.1$scores[,1],pca.1$scores[,2], labels=names(pca.1$scores[,1]), cex= 0.7)
dev.off()
### find clusters
grp <- find.clusters(aa.genlight, max.n.clust=20, glPca = pca.1, perc.pca = 100, n.iter=1e6, n.start=1000)
### find clusters
grp <- find.clusters(aa.genlight, max.n.clust=20, glPca = pca.1, perc.pca = 100, n.iter=1e6, n.start=1000)
dapc1<-dapc(aa.genlight, grp$grp, glPca = pca.1)
opt_pc <- optim.a.score(dapc1)
opt_pc
dapc1<-dapc(aa.genlight, grp$grp, glPca = pca.1)
#cluster scatterplot
pdf("DAPC_scatter.pdf")
scatter(dapc1)
dev.off()
pdf("DAPC_scatter2.pdf")
scatter(dapc1, cex = 2, legend = TRUE,
clabel = FALSE, posi.leg = "bottomleft", scree.pca = TRUE,
posi.pca = "topleft", cleg = 0.75, xax = 1, yax = 2, inset.solid = 1)
dev.off()
table(dapc1$grp)
###
#CROSS VALIDATION # DO NOT RUN UNLESS NEEDED
###
#transform vcf to genind
aa.genind <- vcfR2genind(vcf)
#set populations based on DAPC resuts
dapcgrp<-dapc1$grp
dapcgrp<-dapcgrp[order(match(names(dapcgrp),indNames(aa.genind)))]
pop(aa.genind) <- dapcgrp
library(poppr)
set.seed(999)
#pdf("cross_val.pdf")
#pramx <- xvalDapc(tab(aa.genind, NA.method = "mean"), pop(aa.genind))
#system.time(xval <- xvalDapc(tab(aa.genind, NA.method = "mean"), pop(aa.genind),n.pca.max=300,
result = "groupMean", center = TRUE, scale = FALSE,
n.pca = NULL, n.rep = 30, xval.plot = TRUE,
parallel = "multicore", ncpus = 3))
#dev.off()
###
###DAPC map
###
### make a data frame
x <- data.frame(keyName=names(grp$grp), value=grp$grp, row.names=NULL) #
bar<-cbind(x[order(x$keyName),],sb[order(sb$voucher),])
dapc_grps<-data.frame(bar$index,bar$value)
dapc_grps<-dapc_grps[order(dapc_grps$bar.index),]
dapc_grps
foo<-foo[order(foo$index),]
foo
foo
df<-data.frame(foo,dapc_grps)
df
df<-df[,c(2:4,7,9)]
df
write.csv(df,"dapc_grps.csv")
### select 5 random from each DAPC grp
rand5<-do.call( rbind, lapply( split(dapc_grps2, dapc_grps2$bar.value) ,
function(df) df[sample(nrow(df), 5) , ] )
)
### select 5 random from each DAPC grp
rand5<-do.call( rbind, lapply( split(dapc_grps, dapc_grps$bar.value) ,
function(df) df[sample(nrow(df), 5) , ] )
)
prunetree<-setdiff(sb$index,rand5$bar.index)
write.csv(prunetree,"dapc_grps_not_rand5.csv")
write.csv(rand5,"dapc_grps_rand5.csv")
###
# DESCRIPTIVE STATISTICS
###
library("hierfstat")
library("pegas")
#set individual names
indNames(aa.genind) <-sb$voucher
indNames(aa.genlight) <-sb$voucher
#set populations based on DAPC results
dapcgrp<-dapc1$grp
names(dapcgrp)
dapcgrp<-dapcgrp[order(match(names(dapcgrp),indNames(aa.genind)))]
pop(aa.genind) <- dapcgrp
pop(aa.genlight) <- dapcgrp
#pop cannot be named with numbers so rename with characters
#change for number of pops
popNames(aa.genind)<-c("a","b","c","d","e")
popNames(aa.genind)
#calculate allelic richness per population
ar<-allelic.richness(aa.genind[,-1])
ardf<-data.frame(ar)
ardf<-na.omit(ardf)
ar_vect<-colMeans(ardf)[2:4]
#summary of genind object
div<-summary(aa.genind)
# Calculate Fst
library(dartR)
fst_tab<-gl.fst.pop(aa.genlight, nboots = 1000, percent = 95, nclusters = 2)
fst_tab$Fsts
fst_tab$Pvalues
write.csv(fst_tab$Fsts,"fst_tab.csv")
###
# Descriptive stats
###
#calculated mean hobs per pop
n.pop <- seppop(aa.genind)
mean.hobs <- do.call("c", lapply(n.pop, function(x) mean(summary(x)$Hobs)))
mean.hobs[is.nan(mean.hobs)] <- NA
barplot(mean.hobs)
mean.hexp <- do.call("c", lapply(n.pop, function(x) mean(summary(x)$Hexp)))
mean.hexp[is.nan(mean.hexp)] <- NA
barplot(mean.hexp)
inds<- do.call("c", lapply(n.pop, function(x) summary(x)$n))
tot_alleles<- do.call("c", lapply(n.pop, function(x) summary(x)$pop.n.all))
###
#private alleles
###
library(poppr)
Pinfpriv <- private_alleles(aa.genind, report = "table",level = "population",count.alleles = F)
rowSums(Pinfpriv)
## make table with all summary stats
sum_stats<-cbind(unique(x$dapc),inds,tot_alleles,rowSums(Pinfpriv),ar_vect,mean.hobs,mean.hexp,mean.hexp-mean.hobs)
sum_stats<-sum_stats[1:6,]
sum_stats
colnames(sum_stats)<-c("n","total alleles","private alleles","allelic richness","hobs","hexp","hexp-hobs")
sum_stats_rnd<-round(sum_stats, digits = 3)
sum_stats_rnd
write.csv(sum_stats_rnd,'sum_stats.csv')
###
# TESS3
###
setwd("~/Dropbox/projects/AJH_AFRODYN/clustering/podo_b/")
require(tess3r)
require(maps)
require(LEA)
#had to remove a ln 4072 that couldn't be imported
vcf2lfmm("podo_b_filtered.vcf", force = TRUE)
setwd("~/Dropbox/projects/AJH_AFRODYN/clustering/podo_b/")
#had to remove a ln 4072 that couldn't be imported
vcf2lfmm("podo_b_filtered_maf.vcf", force = TRUE)
#had to remove a ln 4072 that couldn't be imported
vcf2lfmm("podo_b_filtered_maf.vcf", force = TRUE)
#had to remove a ln 4072 that couldn't be imported
vcf2lfmm("podo_b_filtered_maf.vcf", force = TRUE)
#had to remove a ln 4072 that couldn't be imported
vcf2lfmm("podo_b_filtered_maf.vcf", force = TRUE)
#had to remove a ln 4072 that couldn't be imported
vcf2lfmm("podo_b_filtered_maf.vcf", force = TRUE)
